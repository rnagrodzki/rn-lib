<!--
    Copyright (c) 2007-2008 Allurent, Inc.
    http://code.google.com/p/antennae/
    
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    
    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.
    
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
    LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
    WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
-->
<project name="tools.targets">
    <!--
        The following targets are common targets that every project should
        support and the interdependencies between such targets. If another
        project overrides this method it can reference it by calling
        tools.target.
    -->

    <!--
        ++ =======================================================================
        ++ Target: init
        ++ 
        ++ Create all directories and other resources required by miscellaneous targets.
        ++ =======================================================================
    -->
    <target name="init" description="Set up the project">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.generated.dir}" />
        <mkdir dir="${build.javac.dir}" />
        <mkdir dir="${build.compc.dir}" />
        <mkdir dir="${build.mxmlc.dir}" />
        <mkdir dir="${build.asdoc.dir}" />
        <mkdir dir="${build.stage.dir}" />
        <mkdir dir="${build.dist.dir}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: build
        ++ 
        ++ Build everything
        ++ =======================================================================
    -->
    <target name="build" depends="init" description="Build the project" />

    <!--
        ++ =======================================================================
        ++ Target: test
        ++ 
        ++ Test everything
        ++ =======================================================================
    -->
    <target name="test" depends="build" description="Test the project" />

    <!--
        ++ =======================================================================
        ++ Target: stage
        ++ 
        ++ Stage the project for creating a distribution
        ++ =======================================================================
    -->
    <target name="stage" depends="build" description="Stage the project" />

    <!--
        ++ =======================================================================
        ++ Target: dist
        ++ 
        ++ Create a distribution version of the project
        ++ =======================================================================
    -->
    <target name="dist" depends="stage" description="Create a distribution" />

    <!--
        ++ =======================================================================
        ++ Target: deploy
        ++ 
        ++ Deploy the project
        ++ =======================================================================
    -->
    <target name="deploy" depends="dist" description="Deploy the project" />

    <!--
        ++ =======================================================================
        ++ Target: clean
        ++ 
        ++ Remove all build assets from a project directory.
        ++ =======================================================================
    -->
    <target name="clean" description="Clean the project">
        <!--
            Manually delete each one in case one of them
            was moved to a directory not under build.dir
        -->
        <delete dir="${build.dist.dir}" quiet="true" />
        <delete dir="${build.stage.dir}" quiet="true" />
        <delete dir="${build.asdoc.dir}" quiet="true" />
        <delete dir="${build.mxmlc.dir}" quiet="true" />
        <delete dir="${build.compc.dir}" quiet="true" />
        <delete dir="${build.javac.dir}" quiet="true" />
        <delete dir="${build.generated.dir}" quiet="true" />
        <delete dir="${build.dir}" quiet="true" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: undeploy
        ++ 
        ++ Undeploy the project
        ++ =======================================================================
    -->
    <target name="undeploy" description="Undeploy the project" />

    <!--
        The following targets are utility targets that define standard targets a
        project might need to run into order to complete these steps. Based on the
        properties set via build-common-properties.xml these targets define a reasonable
        default behavior.
    -->

    <!--
        ++ =======================================================================
        ++ Target: flex-application
        ++ 
        ++ Build a Flex application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="flex-application" depends="init,flex-application-check,flex-application-copy"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${src.flex.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-application
        ++ 
        ++ Build a Flex based AIR application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="air-application" depends="init,flex-application-check"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${src.flex.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}" config="${air.config}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-application-copy
        ++ 
        ++ Copies all files not part of the compile step to the destination
        ++ directory
        ++ Separate target to copy non-source files to allow easy customization
        ++ =======================================================================
    -->
    <target name="flex-application-copy">
        <copy todir="${build.mxmlc.dir}" includeEmptyDirs="false">
            <fileset dir="${src.flex.dir}">
                <exclude name="**/*.as" />
                <exclude name="**/*.mxml" />
            </fileset>
        </copy>
    </target>

    <!-- up to date check for flex-application -->
    <target name="flex-application-check">
        <!--
            This somewhat convoluted procedure calculates a comma-delimited
            list of SWCs relative to the root directory, which can be used
            below as a matching "pattern" for an <uptodate> fileset.
        -->
        <pathconvert property="flex.lib.files" refid="flex.lib.path" pathsep=",">
            <globmapper from="${uptodate.dir}/*" to="*" handledirsep="true" />
        </pathconvert>

        <!-- Default the SWC list to a pattern that matches nothing if none were speced -->
        <condition property="mxmlc.lib.files" value="${flex.lib.files}" else="__no_match__">
            <not>
                <equals arg1="" arg2="${flex.lib.files}" trim="true" />
            </not>
        </condition>

        <uptodate property="${project.swf}.compiled"
            targetfile="${build.mxmlc.dir}/${project.swf}">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
            <srcfiles dir="${build.generated.dir}" includes="**/*" />
            <srcfiles dir="${uptodate.dir}" includes="${mxmlc.lib.files}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-library
        ++ 
        ++ Build a Flex SWC.
        ++ =======================================================================
    -->
    <target name="flex-library" depends="init,flex-library-check" unless="${project.swc}.compiled"
        description="compile flex code into a SWC">
        <compc src.dir="${src.flex.dir}" dest="${build.compc.dir}/${project.swc}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-library
        ++
        ++ Build a Flex SWC that includes AIR dependencies.
        ++ =======================================================================
    -->
    <target name="air-library" depends="init,flex-library-check" unless="${project.swc}.compiled"
        description="compile AIR code into a SWC">
        <compc src.dir="${src.flex.dir}" dest="${build.compc.dir}/${project.swc}"
            config="${air.config}" />
    </target>

    <!-- up to date check for flex-classes -->
    <target name="flex-library-check">
        <!-- avoid error if no generated files exist -->
        <pathconvert property="flex.lib.files" refid="flex.lib.path" pathsep=",">
            <globmapper from="${uptodate.dir}/*" to="*" handledirsep="true" />
        </pathconvert>

        <condition property="compc.lib.files" value="${flex.lib.files}" else="__no_match__">
            <not>
                <equals arg1="" arg2="${flex.lib.files}" trim="true" />
            </not>
        </condition>

        <uptodate property="${project.swc}.compiled"
            targetfile="${build.compc.dir}/${project.swc}">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
            <srcfiles dir="${uptodate.dir}" includes="${compc.lib.files}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-test-application-stage
        ++
        ++ Stage a Test AIR application's assets for use by ADL or ADT, excluding all templates.
        ++ =======================================================================
    -->
    <target name="air-test-application-stage" depends="air-test-application">
        <copy todir="${build.stage.dir}" file="${build.mxmlc.dir}/${project.swf}" />
        <copy todir="${build.stage.dir}" file="${build.generated.dir}/${project.air.desc}" />
        <copy todir="${build.assets.dir}">
            <fileset dir="${src.assets.dir}">
                <exclude name="**/template.*" />
            </fileset>
        </copy>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-application-stage
        ++
        ++ Stage an AIR application's assets for use by ADL or ADT, excluding all templates.
        ++ =======================================================================
    -->
    <target name="air-application-stage" depends="air-application">
        <copy todir="${build.stage.dir}" file="${build.mxmlc.dir}/${project.swf}" />
        <copy todir="${build.stage.dir}" file="${src.flex.dir}/${project.air.desc}" />
        <copy todir="${build.assets.dir}">
            <fileset dir="${src.assets.dir}">
                <exclude name="**/template.*" />
            </fileset>
        </copy>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-package
        ++
        ++ Compile and package an AIR application.
        ++ =======================================================================
    -->
    <target name="air-package" unless="${project.air}.compiled"
        depends="air-application-stage,air-package-check,air-certificate-password-prompt">
        <adt />
    </target>

    <target name="air-package-check">
        <uptodate property="${project.air}.compiled"
            targetfile="${build.dist.dir}/${project.air}">
            <srcfiles dir="${build.stage.dir}" />
        </uptodate>
        <condition property="air.certificate.password.prompt">
            <and>
                <not>
                    <isset property="air.certificate.password" />
                </not>
                <not>
                    <isset property="${project.air}.compiled" />
                </not>
            </and>
        </condition>
    </target>

    <target name="air-certificate-password-prompt" if="air.certificate.password.prompt">
        <input message="Please enter password for AIR certificate:"
            addproperty="air.certificate.password" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-launch
        ++
        ++ Launch an AIR application using ADL.
        ++ =======================================================================
    -->
    <target name="air-launch" depends="air-application-stage">
        <adl />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: asdoc
        ++ Create ASDoc files for the project
        ++ =======================================================================
    -->
    <target name="asdoc" depends="init,asdoc-check" unless="asdoc.uptodate"
        description="create AS docs">
        <asdoc src.dir="${src.flex.dir}" as.path="${src.flex.dir}" dest.dir="${build.asdoc.dir}" />
    </target>

    <!-- up to date check for asdoc -->
    <target name="asdoc-check">
        <uptodate property="asdoc.uptodate" targetfile="${build.asdoc.dir}/index.html">
            <srcfiles dir="${src.flex.dir}" includes="**/*" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: flex-test-application
        ++ 
        ++ Build a Flex test application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="flex-test-application"
        depends="init,create-test-suite,flex-test-app,flex-application-check,flex-application-copy"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${build.generated.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}"
            options="-verbose-stacktraces=true ${flex.mxmlc.options}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: air-test-application
        ++ 
        ++ Build a Air test application, including the copying of non-compiled
        ++ resources.
        ++ =======================================================================
    -->
    <target name="air-test-application"
        depends="init,create-test-suite,air-test-app,flex-application-check,flex-application-copy"
        unless="${project.swf}.compiled" description="Compile the application">
        <mxmlc src="${build.generated.dir}/${project.flex.application}"
            dest="${build.mxmlc.dir}/${project.swf}"
            options="-verbose-stacktraces=true ${flex.mxmlc.options}" config="${air.config}" />
    </target>

    <target name="flex-test-app">
        <copy file="${arc-flexunit.mxml}"
            tofile="${build.generated.dir}/${project.flex.application}">
            <filterset>
                <filter token="arc-flexunit.alltests.suite" value="${arc-flexunit.alltests.suite}" />
                <filter token="arc-flexunit.reportserver.host"
                    value="${arc-flexunit.reportserver.host}" />
                <filter token="arc-flexunit.reportserver.port"
                    value="${arc-flexunit.reportserver.port}" />
            </filterset>
        </copy>
    </target>

    <target name="air-test-app">
        <copy file="${arc-air-flexunit.mxml}"
            tofile="${build.generated.dir}/${project.flex.application}">
            <filterset>
                <filter token="arc-flexunit.alltests.suite" value="${arc-flexunit.alltests.suite}" />
                <filter token="arc-flexunit.reportserver.host"
                    value="${arc-flexunit.reportserver.host}" />
                <filter token="arc-flexunit.reportserver.port"
                    value="${arc-flexunit.reportserver.port}" />
            </filterset>
        </copy>
        <copy file="${arc-air-flexunit-app.xml}"
            tofile="${build.generated.dir}/${project.air.desc}">
            <filterset>
                <filter token="project.name" value="${project.name}" />
            </filterset>
        </copy>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: create-test-suite
        ++ Generate arc-flexunit compatible AllTests AS class from flexunit tests
        ++ =======================================================================
    -->
    <target name="create-test-suite" depends="init,create-test-suite-check"
        unless="create-test-suite.uptodate">
        <echo message="Updating ${build.generated.dir}/${arc-flexunit.class}.as" />
        <java classname="com.allurent.flexunit.framework.AllTestsFileGenerator" fork="true"
            failonerror="true" logError="true"
            output="${build.generated.dir}/${arc-flexunit.class}.as">
            <classpath>
                <pathelement location="${arc-flexunit.jar}" />
            </classpath>
            <arg value="${arc-flexunit.filters-fail}" />
            <arg value="${src.flex.dir}" />
            <arg value="${arc-flexunit.filters}" />
        </java>
    </target>

    <target name="create-test-suite-check">
        <uptodate property="create-test-suite.uptodate"
            targetfile="${build.generated.dir}/${arc-flexunit.class}.as">
            <srcfiles dir="${src.flex.dir}" />
            <srcfiles file="${arc-flexunit.filters}" />
        </uptodate>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-flexunit
        ++ 
        ++ Run FlexUnit tests
        ++ =======================================================================
    -->
    <target name="test-flexunit"
        depends="init,test-flexunit-os,test-flexunit-mac,test-flexunit-notmac">
        <echo message="${server.output}" />

        <condition property="flexunit.failed">
            <not>
                <and>
                    <equals arg1="0" arg2="${reportserver.return.code}" />
                    <equals arg1="0" arg2="${flashplayer.return.code}" />
                </and>
            </not>
        </condition>
        <antcall target="test-flexunit-failure" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-air-flexunit
        ++ 
        ++ Run FlexUnit tests in AIR
        ++ =======================================================================
    -->
    <target name="test-air-flexunit"
        depends="init,air-test-application-stage">

        <parallel>
            <!-- Start the ReportServer and listen for results from the standalone player.    -->
            <java classname="com.allurent.flexunit.framework.UnitTestReportServer"
                outputproperty="server.output" fork="true" resultproperty="reportserver.return.code"
                timeout="${arc-flexunit.timeout}">
                <classpath>
                    <pathelement location="${arc-flexunit.jar}" />
                </classpath>

                <arg value="${arc-flexunit.reportserver.port}" />
            </java>

            <!-- Start the air app with the swf and app descriptor.  Tests execute when the adl loads the swf. -->
            <sequential>
                <!-- Need to wait a couple of seconds to avoid a race condition in Ant -->
                <sleep seconds="2" />
                <exec executable="${air.adl}" resultproperty="adl.return.code">
                    <arg value="${build.stage.dir}/${project.air.desc}" />
                    <arg value="${build.stage.dir}" />
                </exec>
            </sequential>
        </parallel>

        <echo message="${server.output}" />

        <condition property="flexunit.failed">
            <not>
                <and>
                    <equals arg1="0" arg2="${reportserver.return.code}" />
                    <equals arg1="0" arg2="${adl.return.code}" />
                </and>
            </not>
        </condition>
        <antcall target="test-flexunit-failure" />
    </target>

    <target name="test-flexunit-os">
        <condition property="test.flexunit.mac" value="true">
            <os family="mac" />
        </condition>
    </target>

    <target name="test-flexunit-mac" if="test.flexunit.mac">
        <parallel>
            <!-- Start the ReportServer and listen for results from the standalone player.    -->
            <java classname="com.allurent.flexunit.framework.UnitTestReportServer"
                outputproperty="server.output" fork="true" resultproperty="reportserver.return.code"
                timeout="${arc-flexunit.timeout}">
                <classpath>
                    <pathelement location="${arc-flexunit.jar}" />
                </classpath>

                <arg value="${arc-flexunit.reportserver.port}" />
            </java>

            <!-- Start the standalone player with the swf.  Tests execute when the standalone player loads the swf. -->
            <sequential>
                <!-- Need to wait a couple of seconds to avoid a race condition in Ant -->
                <sleep seconds="2" />
                <!--
                    In order to use the Standalone player from the command line on a Mac
                    it needs to be launched using the open command.
                -->
                <exec executable="${mac.open}" dir="${basedir}/${build.mxmlc.dir}"
                    failonerror="false" resultproperty="flashplayer.return.code"
                    timeout="${arc-flexunit.timeout}" vmlauncher="true">
                    <arg value="-a" />
                    <arg value="${flex.standalone.player}" />
                    <arg value="${project.swf}" />
                    <env key="DISPLAY" value="${environment.display}" />
                </exec>
            </sequential>
        </parallel>
    </target>

    <target name="test-flexunit-notmac" unless="test.flexunit.mac">
        <parallel>
            <!-- Start the ReportServer and listen for results from the standalone player.    -->
            <java classname="com.allurent.flexunit.framework.UnitTestReportServer"
                outputproperty="server.output" fork="true" resultproperty="reportserver.return.code"
                timeout="${arc-flexunit.timeout}">
                <classpath>
                    <pathelement location="${arc-flexunit.jar}" />
                </classpath>

                <arg value="${arc-flexunit.reportserver.port}" />
            </java>

            <!-- Start the standalone player with the swf.  Tests execute when the standalone player loads the swf. -->
            <sequential>
                <!-- Need to wait a couple of seconds to avoid a race condition in Ant -->
                <sleep seconds="2" />
                <exec executable="${flex.standalone.player}" dir="${basedir}/${build.mxmlc.dir}"
                    failonerror="false" resultproperty="flashplayer.return.code"
                    timeout="${arc-flexunit.timeout}" vmlauncher="true">
                    <arg value="${basedir}/${build.mxmlc.dir}/${project.swf}" />
                    <env key="DISPLAY" value="${environment.display}" />
                </exec>
            </sequential>
        </parallel>
    </target>

    <!--
        ++ =======================================================================
        ++ Target: test-flexunit-failure
        ++ 
        ++ Target to handle a failed flexunit test run
        ++ It is common to override this and do additional actions if a test fails
        ++ such as create a failure file, send email, etc.
        ++ =======================================================================
    -->
    <target name="test-flexunit-failure" if="flexunit.failed">
        <fail message="Test suite failed" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: java-classes
        ++ 
        ++ Compile java files
        ++ =======================================================================
    -->
    <target name="java-classes" depends="init,java-classes-copy"
        description="Compile java classes">
        <java-compile debug="${javac.debug}" />
    </target>

    <!--
        ++ =======================================================================
        ++ Target: java-classes-copy
        ++ 
        ++ Copies all files not part of the compile step to the destination
        ++ directory
        ++ =======================================================================
    -->
    <target name="java-classes-copy">
        <copy todir="${build.javac.dir}">
            <fileset dir="${src.java.dir}" includes="**/*" excludes="**/*.java" />
        </copy>
    </target>
</project>
