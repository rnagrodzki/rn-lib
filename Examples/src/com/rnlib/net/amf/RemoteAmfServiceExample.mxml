<?xml version="1.0"?>
<!--
  - Copyright (c) 2012. RafaÅ‚ Nagrodzki (rafal[dot]nagrodzki[dot]dev[at]gmail[dot]com)
  -  http://rafal-nagrodzki.com/
  -
  -  Permission is hereby granted, free of charge, to any person obtaining
  -  a copy of this software and associated documentation files (the
  -  "Software"), to deal in the Software without restriction, including
  -  without limitation the rights to use, copy, modify, merge, publish,
  -  distribute, sublicense, and/or sell copies of the Software, and to
  -  permit persons to whom the Software is furnished to do so, subject to
  -  the following conditions:
  -
  -  The above copyright notice and this permission notice shall be
  -  included in all copies or substantial portions of the Software.
  -
  -  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  -  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  -  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  -  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
  -  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
  -  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
  -  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  -->
<local:ExampleBase xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:local="*"
                   title="RemoteAmfService"
                   description="Example of powerful util to manage amf communication"
                   creationComplete="creationCompleteHandler(event)">
    <fx:Script><![CDATA[
        import mx.events.FlexEvent;

        protected var _ras:RemoteAmfService;

        protected function creationCompleteHandler(e:FlexEvent):void
        {
            _ras = new RemoteAmfService();
            _ras.addEventListener(AMFEvent.RESULT, onEventResult);
            _ras.addEventListener(AMFEvent.FAULT, onEventFault);
        }

        private function initCallbackPerMethod():void
        {
            var ras:RemoteAmfService = new RemoteAmfService();
            ras.addMethod("getItems", onItemsResult, onItemsFault);
            ras.getItems(/*here you can pass args for remote method*/);
        }

        private function onItemsFault(fault:Object):void
        {
            // do something with fault response
        }

        private function onItemsResult(result:Object):void
        {
            // do something with result response
        }

        private function initGlobalCallbacks():void
        {
            var ras:RemoteAmfService = new RemoteAmfService();
            ras.result = onResult;
            ras.fault = onFault;
            ras.addMethod("getItems");
            ras.addMethod("getUsers");
            ras.getUsers(/*here you can pass args for remote method*/);
            ras.getItems(/*here you can pass args for remote method*/);
        }

        private function onFault(fault:Object):void
        {
            // do something with fault response
            // on getUsers & getItems methods
        }

        private function onResult(result:Object):void
        {
            // do something with result response
            // on getUsers & getItems methods
        }

        private function initEvents():void
        {
            var ras:RemoteAmfService = new RemoteAmfService();
            ras.addEventListener(AMFEvent.RESULT, onEventResult);
            ras.addEventListener(AMFEvent.FAULT, onEventFault);
            ras.addMethod("getItems");
            ras.addMethod("getUsers");
            ras.getUsers(/*here you can pass args for remote method*/);
            ras.getItems(/*here you can pass args for remote method*/);
        }

        private function onEventResult(e:AMFEvent):void
        {
            // do something with result response
            // on getUsers & getItems methods
        }

        private function onEventFault(e:AMFEvent):void
        {
            // do something with fault response
            // on getUsers & getItems methods
        }
        ]]></fx:Script>

</local:ExampleBase>
